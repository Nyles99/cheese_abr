import asyncio
import datetime
import types
import os
from aiogram.types import InputMediaPhoto, CallbackQuery, Message
from sqlalchemy.ext.asyncio import AsyncSession
from typing import Optional
from aiogram import Bot
from aiogram.client.bot import DefaultBotProperties
from aiogram.enums import ParseMode

from dotenv import find_dotenv, load_dotenv

load_dotenv(find_dotenv())

from database.orm_query import (
    orm_add_to_cart,
    orm_delete_from_cart,
    orm_get_active_products,
    orm_get_banner,
    orm_get_categories,
    orm_get_products,
    orm_get_user_carts,
    orm_reduce_product_in_cart,
    orm_clear_cart,
)
from kbds.inline import (
    get_products_btns,
    get_user_cart,
    get_user_catalog_btns,
    get_user_main_btns,
)
from database.orm_query import Paginator

bot = Bot(token=os.getenv('TOKEN'), default=DefaultBotProperties(parse_mode=ParseMode.HTML))


async def main_menu(session, level, menu_name):
    
    banner = await orm_get_banner(session, menu_name)
    image = InputMediaPhoto(media=banner.image, caption=banner.description)

    kbds = get_user_main_btns(level=level)

    return image, kbds


async def get_user_info_string(bot: Bot, user_id: int) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    """
    try:
        user = await bot.get_chat(user_id)
        
        full_name = user.full_name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        username_1 = f"@{user.username}" if user.username else "–ù–µ —É–∫–∞–∑–∞–Ω"
        
        return f"{full_name} ({username_1})"
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id}: {e}")
        return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–ù–µ —É–∫–∞–∑–∞–Ω)"


async def main_cart_menu(session, level, menu_name, user_id):
    bot = Bot(token=os.getenv('TOKEN'), default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω
    from database.orm_query import orm_get_user
    user = await orm_get_user(session, user_id)
    user_name = await get_user_info_string(bot, user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
    cartss = await orm_get_user_carts(session, user_id)
    spisok = ''
     
    if cartss:
        for cart_item in cartss:
            print(cart_item.product.name)
            spisok = spisok + f'{cart_item.product.name} - {cart_item.quantity} —à—Ç—É–∫. \n'
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º
    phone_info = user.phone if user and user.phone else "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω"
    
    try:
        await bot.send_message(
            chat_id=992900169,
            text=f"üöÄ *–ù–û–í–´–ô –ó–ê–ö–ê–ó!*\n\n"
                 f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {user_name}\n"
                 f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone_info}\n"
                 f"üÜî ID: `{user_id}`\n"
                 f"üìÖ –í—Ä–µ–º—è: {datetime.datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
                 f"üõí –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n{spisok}",
            parse_mode="Markdown"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É: {e}")
    
    await orm_clear_cart(session, user_id)
    banner = await orm_get_banner(session, menu_name)
    image = InputMediaPhoto(media=banner.image, caption="‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü—Ä–æ–¥–æ–ª–∂–∏–º –ø–æ–∫—É–ø–∫–∏?")
    level = 0
    kbds = get_user_main_btns(level=level)
    
    return image, kbds


async def catalog(session, level, menu_name):
    banner = await orm_get_banner(session, menu_name)
    image = InputMediaPhoto(media=banner.image, caption=banner.description)

    categories = await orm_get_categories(session)
    kbds = get_user_catalog_btns(level=level, categories=categories)

    return image, kbds


def pages(paginator: Paginator):
    btns = dict()
    if paginator.has_previous():
        btns["‚óÄ –ü—Ä–µ–¥."] = "previous"

    if paginator.has_next():
        btns["–°–ª–µ–¥. ‚ñ∂"] = "next"

    return btns


async def products(session, level, category, page):
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –í–°–ï —Ç–æ–≤–∞—Ä—ã
    products = await orm_get_products(session, category_id=category)

    paginator = Paginator(products, page=page)
    product = paginator.get_page()[0]

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞
    if product.is_active:
        caption = f"<strong>{product.name}</strong>\n{product.description}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {product.price}\n<strong>–¢–æ–≤–∞—Ä {paginator.page} –∏–∑ {paginator.pages}</strong>"
    else:
        caption = f"<strong>{product.name}</strong>\n{product.description}\n<strong>‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏</strong>\n<strong>–¢–æ–≤–∞—Ä {paginator.page} –∏–∑ {paginator.pages}</strong>"

    image = InputMediaPhoto(
        media=product.image,
        caption=caption,
    )

    pagination_btns = pages(paginator)

    kbds = get_products_btns(
        level=level,
        category=category,
        page=page,
        pagination_btns=pagination_btns,
        product_id=product.id,
    )

    return image, kbds


async def carts(session, level, menu_name, page, user_id, product_id):
    if menu_name == "delete":
        await orm_delete_from_cart(session, user_id, product_id)
        if page > 1:
            page -= 1
    elif menu_name == "decrement":
        is_cart = await orm_reduce_product_in_cart(session, user_id, product_id)
        if page > 1 and not is_cart:
            page -= 1
    elif menu_name == "increment":
        await orm_add_to_cart(session, user_id, product_id)
    
    
    carts = await orm_get_user_carts(session, user_id)

    if not carts:
        banner = await orm_get_banner(session, "cart")
        image = InputMediaPhoto(
            media=banner.image, caption=f"<strong>{banner.description}</strong>"
        )

        kbds = get_user_cart(
            level=level,
            page=None,
            pagination_btns=None,
            product_id=None,
        )

    else:
        paginator = Paginator(carts, page=page)

        cart = paginator.get_page()[0]
        cart_price = int(cart.product.price[: cart.product.price.find('‚ÇΩ')]) * cart.quantity
        total_price = sum(cart.quantity * int(cart.product.price[: cart.product.price.find('‚ÇΩ')]) for cart in carts)
        
        image = InputMediaPhoto(
            media=cart.product.image,
            caption=f"<strong>{cart.product.name}</strong>\n{cart.product.price} x {cart.quantity} = {cart_price}‚ÇΩ \
                    \n–¢–æ–≤–∞—Ä {paginator.page} –∏–∑ {paginator.pages} –≤ –∫–æ—Ä–∑–∏–Ω–µ.\n–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ {total_price}‚ÇΩ",
        )

        pagination_btns = pages(paginator)

        kbds = get_user_cart(
            level=level,
            page=page,
            pagination_btns=pagination_btns,
            product_id=cart.product.id,
        )

    return image, kbds


async def get_menu_content(
    session: AsyncSession,
    level: int,
    menu_name: str,
    category: Optional[int] = None,
    page: Optional[int] = None,
    product_id: Optional[int] = None,
    user_id: Optional[int] = None,
    
):
    if level == 0:
        return await main_menu(session, level, menu_name)
    elif level == 1:
        return await catalog(session, level, menu_name)
    elif level == 2:
        return await products(session, level, category, page)
    elif level == 3:
        return await carts(session, level, menu_name, page, user_id, product_id)
    elif level == 4:
        #print ('–ó–¥–µ—Å—å')
        return await main_cart_menu(session, level, 'main', user_id)